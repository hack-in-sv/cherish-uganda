#!/usr/bin/env node

/*  Module dependencies. */
const app = require('../app');
const debug = require('debug')('cherish-uganda-core:server');
const http = require('http');
const models = require('../models');



// import models from modules
// TODO this needs to be rethought. Probably need API on the main module defn
//      that allows the module to do any of the core bootstrapping it needs to: 
//      const auth = require('modules/auth');
//      auth.init({db: db})
models.importFromModule('auth');

const server = http.createServer(app);
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
models.sequelize.sync()
  .then(function() {
    /* Listen on provided port, on all network interfaces. */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch(err => console.error('Unable to synchronize database models:', err));

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
